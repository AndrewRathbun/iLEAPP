From 944c48c787db2ca7de6d43a8c4d5579fc837064e Mon Sep 17 00:00:00 2001
From: Alex Caithness <alex.caithness@cclsolutionsgroup.com>
Date: Thu, 30 Jun 2022 17:12:06 +0100
Subject: [PATCH 01/19] Implement new plugin loader machinery Integrate in
 plugin loader into cli and gui versions Convert a few plugins to new format
 (add __artifacts__) for testing

---
 aleapp.py                              | 61 ++++++++++++++-----------
 aleappGUI.py                           | 55 +++++++++++++++--------
 plugin_loader.py                       | 62 ++++++++++++++++++++++++++
 scripts/artifacts/calllogs.py          | 11 ++++-
 scripts/artifacts/contacts.py          |  9 +++-
 scripts/artifacts/usagestatsVersion.py | 53 ++++++++++++----------
 6 files changed, 179 insertions(+), 72 deletions(-)
 create mode 100644 plugin_loader.py

diff --git a/aleapp.py b/aleapp.py
index 4da9370..43acaee 100644
--- a/aleapp.py
+++ b/aleapp.py
@@ -1,13 +1,16 @@
 import argparse
 import io
 import os
+import typing
+
+import plugin_loader
 import scripts.report as report
 import shutil
 import traceback
 
 from scripts.search_files import *
 from scripts.ilapfuncs import *
-from scripts.ilap_artifacts import *
+#from scripts.ilap_artifacts import *
 from scripts.version_info import aleapp_version
 from time import process_time, gmtime, strftime
 
@@ -20,16 +23,20 @@ def main():
     parser.add_argument('-w', '--wrap_text', required=False, action="store_false", help='do not wrap text for output of data files')
         
     args = parser.parse_args()
-    
-    if args.artifact_paths == True:
+
+    loader = plugin_loader.PluginLoader()
+
+    if args.artifact_paths:
         print('Artifact path list generation started.')
         print('')
-        for key, value in tosearch.items():
-            if type(value[1]) is tuple:
-                for x in value[1]:
+        #for key, value in tosearch.items():
+        for plugin in loader.plugins:
+            #if type(value[1]) is tuple:
+            if isinstance(plugin.search, tuple):
+                for x in plugin.search:
                     print(x)
-            else:
-                print(value[1])
+            else:  # TODO check that this is actually a string?
+                print(plugin.search)
         print('')
         print('Artifact path list generation completed')    
         return
@@ -38,26 +45,26 @@ def main():
         input_path = args.input_path
         extracttype = args.t
 
-        if args.wrap_text == None:
+        if args.wrap_text is None:
             wrap_text = True
         else:
             wrap_text = args.wrap_text 
     
-        if args.output_path == None:
+        if args.output_path is None:
             parser.error('No OUTPUT folder path provided')
             return
         else:
             output_path = os.path.abspath(args.output_path)
         
-        if output_path == None:
+        if output_path is None:
             parser.error('No OUTPUT folder selected. Run the program again.')
             return
             
-        if input_path == None:
+        if input_path is None:
             parser.error('No INPUT file or folder selected. Run the program again.')
             return
         
-        if args.t == None:
+        if args.t is None:
             parser.error('No INPUT file or folder selected. Run the program again.')
             return
 
@@ -77,9 +84,11 @@ def main():
 
         out_params = OutputParameters(output_path)
 
-        crunch_artifacts(tosearch, extracttype, input_path, out_params, 1, wrap_text)
+        crunch_artifacts(list(loader.plugins), extracttype, input_path, out_params, 1, wrap_text)
+
 
-def crunch_artifacts(search_list, extracttype, input_path, out_params, ratio, wrap_text):
+def crunch_artifacts(
+        plugins: typing.Sequence[plugin_loader.PluginSpec], extracttype, input_path, out_params, ratio, wrap_text):
     start = process_time()
 
     logfunc('Procesing started. Please wait. This may take a few minutes...')
@@ -114,7 +123,7 @@ def crunch_artifacts(search_list, extracttype, input_path, out_params, ratio, wr
         return False
 
     # Now ready to run
-    logfunc(f'Artifact categories to parse: {str(len(search_list))}')
+    logfunc(f'Artifact categories to parse: {str(len(plugins))}')
     logfunc(f'File/Directory selected: {input_path}')
     logfunc('\n--------------------------------------------------------------------------------------')
 
@@ -124,25 +133,27 @@ def crunch_artifacts(search_list, extracttype, input_path, out_params, ratio, wr
     
     categories_searched = 0
     # Search for the files per the arguments
-    for key, val in search_list.items():
-        search_regexes = []
-        artifact_pretty_name = val[0]
-        if isinstance(val[1], list) or isinstance(val[1], tuple):
-            search_regexes = val[1]
+    #for key, val in search_list.items():
+    for plugin in plugins:
+        #search_regexes = []
+        artifact_pretty_name = plugin.name
+        if isinstance(plugin.search, list) or isinstance(plugin.search, tuple):
+            search_regexes = plugin.search
         else:
-            search_regexes.append(val[1])
+            search_regexes = [plugin.search]
         files_found = []
         for artifact_search_regex in search_regexes:
             found = seeker.search(artifact_search_regex)
             if not found:
                 logfunc()
-                logfunc(f'No files found for {key} -> {artifact_search_regex}')
-                log.write(f'No files found for {key} -> {artifact_search_regex}<br><br>')
+                logfunc(f'No files found for {plugin.name} -> {artifact_search_regex}')
+                log.write(f'No files found for {plugin.name} -> {artifact_search_regex}<br><br>')
             else:
                 files_found.extend(found)
         if files_found:
             logfunc()
-            process_artifact(files_found, key, artifact_pretty_name, seeker, out_params.report_folder_base, wrap_text)
+            #process_artifact(files_found, key, artifact_pretty_name, seeker, out_params.report_folder_base, wrap_text)
+            plugin.method(files_found, out_params.report_folder_base, seeker, wrap_text)
             for pathh in files_found:
                 if pathh.startswith('\\\\?\\'):
                     pathh = pathh[4:]
diff --git a/aleappGUI.py b/aleappGUI.py
index 21db24f..1d7afb1 100644
--- a/aleappGUI.py
+++ b/aleappGUI.py
@@ -1,15 +1,21 @@
+import typing
+
 import aleapp
 import os
 import PySimpleGUI as sg
 import sys
 import webbrowser
 
+import plugin_loader
 from scripts.ilapfuncs import *
 from scripts.version_info import aleapp_version
 from time import process_time, gmtime, strftime
-from scripts.ilap_artifacts import *
+#from scripts.ilap_artifacts import *
 from scripts.search_files import *
 
+MODULE_START_INDEX = 1000
+
+
 def ValidateInput(values, window):
     '''Returns tuple (success, extraction_type)'''
     global indx
@@ -57,29 +63,37 @@ def CheckList(mtxt, lkey, mdstring, disable=False):
         dstate = True
     return [sg.CBox(mtxt, default=dstate, key=lkey, metadata=mdstring, disabled=disable)]
 
+
 def pickModules():
     global indx
     global mlist
-    
-    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'scripts', 'artifacts')
+    global loader
 
-    # Create sorted dict from 'tosearch' dictionary based on plugin category
-    sorted_tosearch = {k: v for k, v in sorted(tosearch.items(), key=lambda item: item[1][0].upper())}
+    loader = plugin_loader.PluginLoader()
 
-    indx = 1000     # arbitrary number to not interfere with other controls
-    for key, val in sorted_tosearch.items():
-        disabled = False if key != 'usagestatsVersion' else True # usagestatsVersion is REQUIRED
-        mlist.append( CheckList(val[0] + f' [{key}]', indx, key, disabled) )
+    #script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'scripts', 'artifacts')
+
+    # Create sorted dict from 'tosearch' dictionary based on plugin category
+    #sorted_tosearch = {k: v for k, v in sorted(tosearch.items(), key=lambda item: item[1][0].upper())}
+    # sorted_tosearch = {p.name: p for p in loader.plugins}
+
+    indx = MODULE_START_INDEX     # arbitrary number to not interfere with other controls
+    for plugin in sorted(loader.plugins, key=lambda p: p.name.upper()):
+        #disabled = False if plugin_name != 'usagestatsVersion' else True # usagestatsVersion is REQUIRED
+        disabled = plugin.module_name == 'usagestatsVersion'
+        mlist.append(CheckList(f'{plugin.name} [{plugin.module_name}]', indx, plugin.name, disabled))
         indx = indx + 1
-        
+
+
 sg.theme('LightGreen5')   # Add a touch of color
 # All the stuff inside your window.
 
 normal_font = ("Helvetica", 12)
+loader: typing.Optional[plugin_loader.PluginLoader] = None
 mlist = []
 # go through list of available modules and confirm they exist on the disk
 pickModules()
-GuiWindow.progress_bar_total = len(aleapp.tosearch)
+GuiWindow.progress_bar_total = len(loader)
 
 
 layout = [  [sg.Text('Android Logs, Events, And Protobuf Parser', font=("Helvetica", 22))],
@@ -114,11 +128,11 @@ while True:
 
     if event == "SELECT ALL":  
         # mark all modules
-        for x in range(1000,indx):
+        for x in range(MODULE_START_INDEX, indx):
             window[x].Update(True)
     if event == "DESELECT ALL":  
          # none modules
-        for x in range(1000,indx):
+        for x in range(MODULE_START_INDEX, indx):
             window[x].Update(False if window[x].metadata != 'usagestatsVersion' else True)  # usagestatsVersion.py is REQUIRED
     if event == 'Process':
         #check is selections made properly; if not we will return to input form without exiting app altogether
@@ -135,17 +149,19 @@ while True:
                 if output_folder[1] == ':': output_folder = '\\\\?\\' + output_folder.replace('/', '\\')
             
             # re-create modules list based on user selection
-            search_list = { 'usagestatsVersion' : tosearch['usagestatsVersion'] } # hardcode usagestatsVersion as first item
+            #search_list = { 'usagestatsVersion' : tosearch['usagestatsVersion'] } # hardcode usagestatsVersion as first item
+            search_list = [loader['Usage Stats Version']]  # hardcode usagestatsVersion as first item
+
             s_items = 0
-            for x in range(1000,indx):
+            for x in range(MODULE_START_INDEX, indx):
                 if window.FindElement(x).Get():
                     key = window[x].metadata
-                    if (key in tosearch) and (key != 'usagestatsVersion'):
-                        search_list[key] = tosearch[key]
+                    if key in loader and key != 'Usage Stats Version':
+                        search_list.append(loader[key])
                     s_items = s_items + 1 # for progress bar
                 
                 # no more selections allowed
-                window[x].Update(disabled = True)
+                window[x].Update(disabled=True)
                 
             window['SELECT ALL'].update(disabled=True)
             window['DESELECT ALL'].update(disabled=True)
@@ -153,7 +169,8 @@ while True:
             GuiWindow.window_handle = window
             out_params = OutputParameters(output_folder)
             wrap_text = True
-            crunch_successful = aleapp.crunch_artifacts(search_list, extracttype, input_path, out_params, len(aleapp.tosearch)/s_items, wrap_text)
+            crunch_successful = aleapp.crunch_artifacts(
+                search_list, extracttype, input_path, out_params, len(loader)/s_items, wrap_text)
             if crunch_successful:
                 report_path = os.path.join(out_params.report_folder_base, 'index.html')
                     

diff --git a/scripts/artifacts/contacts.py b/scripts/artifacts/contacts.py
index 845c769..b55e4fb 100644
--- a/scripts/artifacts/contacts.py
+++ b/scripts/artifacts/contacts.py
@@ -73,6 +73,11 @@ def get_contacts(files_found, report_folder, seeker, wrap_text):
             logfunc('No Contacts found')
             
 
-        db.close
+        db.close()
     
-    return
\ No newline at end of file
+    return
+
+# 'contacts':('Contacts', ('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*')),
+__artifacts__ = {
+    "Contacts": (('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*'), get_contacts)
+}
\ No newline at end of file
diff --git a/scripts/artifacts/usagestatsVersion.py b/scripts/artifacts/usagestatsVersion.py
index 6f0d8c1..c074644 100644
--- a/scripts/artifacts/usagestatsVersion.py
+++ b/scripts/artifacts/usagestatsVersion.py
@@ -1,13 +1,14 @@
 import csv
-import scripts.artifacts.artGlobals 
-
-from scripts.artifact_report import ArtifactHtmlReport
-from scripts.ilapfuncs import logfunc, tsv, logdevinfo, is_platform_windows
-
-def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
-    data_list = []
-    file_found = str(files_found[0])
-
+import scripts.artifacts.artGlobals 
+
+from scripts.artifact_report import ArtifactHtmlReport
+from scripts.ilapfuncs import logfunc, tsv, logdevinfo, is_platform_windows
+
+
+def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
+    data_list = []
+    file_found = str(files_found[0])
+
     with open(file_found, "r") as f:
         for line in f:
             splits = line.split(';')
@@ -37,18 +38,22 @@ def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
                 
                 logdevinfo(f"Build version per Usagestats: {splits[2]}")
                 data_list.append(('Build Version', splits[2]))
-
-
-    if len(data_list) > 0:
-        report = ArtifactHtmlReport('OS Version')
-        report.start_artifact_report(report_folder, f'OS Version')
-        report.add_script()
-        data_headers = ('Key', 'Value')
-        report.write_artifact_data_table(data_headers, data_list, file_found)
-        report.end_artifact_report()
-        
-        tsvname = f'OS Version'
-        tsv(report_folder, data_headers, data_list, tsvname)
-        
-    else:
-        logfunc(f'No OS Version file available')
\ No newline at end of file
+
+    if len(data_list) > 0:
+        report = ArtifactHtmlReport('OS Version')
+        report.start_artifact_report(report_folder, f'OS Version')
+        report.add_script()
+        data_headers = ('Key', 'Value')
+        report.write_artifact_data_table(data_headers, data_list, file_found)
+        report.end_artifact_report()
+        
+        tsvname = f'OS Version'
+        tsv(report_folder, data_headers, data_list, tsvname)
+        
+    else:
+        logfunc(f'No OS Version file available')
+
+
+__artifacts__ = {
+    "Usage Stats Version": (('*/system/usagestats/*/version', '*/system_ce/*/usagestats/version'), get_usagestatsVersion)
+}
\ No newline at end of file
-- 
2.34.1

