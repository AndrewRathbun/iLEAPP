From 5b3301b4dde5757feaeaa60b7eb5fb86e7560fd0 Mon Sep 17 00:00:00 2001
From: Brigs <abrignoni@gmail.com>
Date: Wed, 13 Jul 2022 15:39:12 -0400
Subject: [PATCH 12/19] Revert "Updated artifacts"

---
 aleapp.py                                   | 105 +++++++-------------
 aleapp.spec                                 |   2 +-
 aleappGUI.py                                |  50 ++++------
 aleappGUI.spec                              |  11 +-
 hook-plugin_loader.py                       |  24 -----
 plugin_loader.py                            |  65 ------------
 scripts/artifacts/accounts_ce.py            |  11 +-
 scripts/artifacts/accounts_ce_authtokens.py |   9 +-
 scripts/artifacts/accounts_de.py            |  10 +-
 scripts/artifacts/adb_hosts.py              |   7 --
 scripts/artifacts/airGuard.py               |   7 +-
 scripts/artifacts/appLockerfishingnet.py    |   9 +-
 scripts/artifacts/appicons.py               |   8 +-
 scripts/artifacts/calllogs.py               |  12 +--
 scripts/artifacts/contacts.py               |  12 +--
 scripts/artifacts/usagestatsVersion.py      |  56 +++++------
 scripts/artifacts/vlcMedia.py               |  11 +-
 scripts/artifacts/vlcThumbs.py              |   7 +-
 18 files changed, 107 insertions(+), 309 deletions(-)
 delete mode 100644 hook-plugin_loader.py
 delete mode 100644 plugin_loader.py

diff --git a/aleapp.py b/aleapp.py
index 5d27f62..4da9370 100644
--- a/aleapp.py
+++ b/aleapp.py
@@ -1,40 +1,35 @@
 import argparse
 import io
-import os.path
-import typing
-import plugin_loader
+import os
 import scripts.report as report
+import shutil
 import traceback
+
 from scripts.search_files import *
 from scripts.ilapfuncs import *
+from scripts.ilap_artifacts import *
 from scripts.version_info import aleapp_version
 from time import process_time, gmtime, strftime
 
-
 def main():
     parser = argparse.ArgumentParser(description='ALEAPP: Android Logs, Events, and Protobuf Parser.')
-    parser.add_argument('-t', choices=['fs', 'tar', 'zip', 'gz'], required=False, type=str.lower, action="store",
-                        help="Input type (fs = extracted to file system folder)")
+    parser.add_argument('-t', choices=['fs','tar','zip', 'gz'], required=False, type=str.lower, action="store", help="Input type (fs = extracted to file system folder)")
     parser.add_argument('-o', '--output_path', required=False, action="store", help='Output folder path')
     parser.add_argument('-i', '--input_path', required=False, action="store", help='Path to input file/folder')
-    parser.add_argument('-p', '--artifact_paths', required=False, action="store_true",
-                        help='Text file list of artifact paths')
-    parser.add_argument('-w', '--wrap_text', required=False, action="store_false",
-                        help='do not wrap text for output of data files')
+    parser.add_argument('-p', '--artifact_paths', required=False, action="store_true", help='Text file list of artifact paths')
+    parser.add_argument('-w', '--wrap_text', required=False, action="store_false", help='do not wrap text for output of data files')
         
     args = parser.parse_args()
-
-    loader = plugin_loader.PluginLoader()
-
-    if args.artifact_paths:
+    
+    if args.artifact_paths == True:
         print('Artifact path list generation started.')
         print('')
-        for plugin in loader.plugins:
-            if isinstance(plugin.search, tuple):
-                for x in plugin.search:
+        for key, value in tosearch.items():
+            if type(value[1]) is tuple:
+                for x in value[1]:
                     print(x)
-            else:  # TODO check that this is actually a string?
-                print(plugin.search)
+            else:
+                print(value[1])
         print('')
         print('Artifact path list generation completed')    
         return
@@ -43,26 +38,26 @@ def main():
         input_path = args.input_path
         extracttype = args.t
 
-        if args.wrap_text is None:
+        if args.wrap_text == None:
             wrap_text = True
         else:
             wrap_text = args.wrap_text 
     
-        if args.output_path is None:
+        if args.output_path == None:
             parser.error('No OUTPUT folder path provided')
             return
         else:
             output_path = os.path.abspath(args.output_path)
         
-        if output_path is None:
+        if output_path == None:
             parser.error('No OUTPUT folder selected. Run the program again.')
             return
             
-        if input_path is None:
+        if input_path == None:
             parser.error('No INPUT file or folder selected. Run the program again.')
             return
         
-        if args.t is None:
+        if args.t == None:
             parser.error('No INPUT file or folder selected. Run the program again.')
             return
 
@@ -82,11 +77,9 @@ def main():
 
         out_params = OutputParameters(output_path)
 
-        crunch_artifacts(list(loader.plugins), extracttype, input_path, out_params, 1, wrap_text)
-
+        crunch_artifacts(tosearch, extracttype, input_path, out_params, 1, wrap_text)
 
-def crunch_artifacts(
-        plugins: typing.Sequence[plugin_loader.PluginSpec], extracttype, input_path, out_params, ratio, wrap_text):
+def crunch_artifacts(search_list, extracttype, input_path, out_params, ratio, wrap_text):
     start = process_time()
 
     logfunc('Procesing started. Please wait. This may take a few minutes...')
@@ -121,60 +114,39 @@ def crunch_artifacts(
         return False
 
     # Now ready to run
-    logfunc(f'Artifact categories to parse: {str(len(plugins))}')
+    logfunc(f'Artifact categories to parse: {str(len(search_list))}')
     logfunc(f'File/Directory selected: {input_path}')
     logfunc('\n--------------------------------------------------------------------------------------')
 
     log = open(os.path.join(out_params.report_folder_base, 'Script Logs', 'ProcessedFilesLog.html'), 'w+', encoding='utf8')
-    nl = '\n'  # literal in order to have new lines in fstrings that create text files
+    nl = '\n' #literal in order to have new lines in fstrings that create text files
     log.write(f'Extraction/Path selected: {input_path}<br><br>')
     
     categories_searched = 0
     # Search for the files per the arguments
-    for plugin in plugins:
-        artifact_pretty_name = plugin.name
-        if isinstance(plugin.search, list) or isinstance(plugin.search, tuple):
-            search_regexes = plugin.search
+    for key, val in search_list.items():
+        search_regexes = []
+        artifact_pretty_name = val[0]
+        if isinstance(val[1], list) or isinstance(val[1], tuple):
+            search_regexes = val[1]
         else:
-            search_regexes = [plugin.search]
+            search_regexes.append(val[1])
         files_found = []
         for artifact_search_regex in search_regexes:
             found = seeker.search(artifact_search_regex)
             if not found:
-                #logfunc()
-                #logfunc(f'No files found for {plugin.name} -> {artifact_search_regex}')
-                log.write(f'No files found for {plugin.name} -> {artifact_search_regex}<br><br>')
+                logfunc()
+                logfunc(f'No files found for {key} -> {artifact_search_regex}')
+                log.write(f'No files found for {key} -> {artifact_search_regex}<br><br>')
             else:
-                for pathh in found:
-                    if pathh.startswith('\\\\?\\'):
-                        pathh = pathh[4:]
-<<<<<<< Updated upstream
-=======
-                        #logfunc(f'Files for {artifact_search_regex} located at {pathh}')
->>>>>>> Stashed changes
-                    log.write(f'Files for {artifact_search_regex} located at {pathh}<br><br>')
                 files_found.extend(found)
         if files_found:
             logfunc()
-            logfunc('{} [{}] artifact started'.format(plugin.name, plugin.module_name))
-            category_folder = os.path.join(out_params.report_folder_base, plugin.category)
-            if not os.path.exists(category_folder):
-                try:
-                    os.mkdir(category_folder)
-                except (FileExistsError, FileNotFoundError) as ex:
-                    logfunc('Error creating {} report directory at path {}'.format(plugin.name, category_folder))
-                    logfunc('Error was {}'.format(str(ex)))
-                    continue  # cannot do work
-            try:
-                plugin.method(files_found, category_folder, seeker, wrap_text)
-            except Exception as ex:
-                logfunc('Reading {} artifact had errors!'.format(plugin.name))
-                logfunc('Error was {}'.format(str(ex)))
-                logfunc('Exception Traceback: {}'.format(traceback.format_exc()))
-                continue  # nope
-
-            logfunc('{} [{}] artifact completed'.format(plugin.name, plugin.module_name))
-
+            process_artifact(files_found, key, artifact_pretty_name, seeker, out_params.report_folder_base, wrap_text)
+            for pathh in files_found:
+                if pathh.startswith('\\\\?\\'):
+                    pathh = pathh[4:]
+                log.write(f'Files for {artifact_search_regex} located at {pathh}<br><br>')
         categories_searched += 1
         GuiWindow.SetProgressBar(categories_searched * ratio)
     log.close()
@@ -182,7 +154,7 @@ def crunch_artifacts(
     logfunc('')
     logfunc('Processes completed.')
     end = process_time()
-    run_time_secs = end - start
+    run_time_secs =  end - start
     run_time_HMS = strftime('%H:%M:%S', gmtime(run_time_secs))
     logfunc("Processing time = {}".format(run_time_HMS))
 
@@ -200,6 +172,5 @@ def crunch_artifacts(
     logfunc(f'Report location: {out_params.report_folder_base}')
     return True
 
-
 if __name__ == '__main__':
     main()
\ No newline at end of file
diff --git a/aleapp.spec b/aleapp.spec
index 0e1be9b..8d09da1 100644
--- a/aleapp.spec
+++ b/aleapp.spec
@@ -12,7 +12,7 @@ a = Analysis(['aleapp.py'],
                     ('.\\scripts\\feather.min.js', '.\\scripts'),
                     ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0')],
              hiddenimports=['simplekml'],
-             hookspath=['.\\'],
+             hookspath=[],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
diff --git a/aleappGUI.py b/aleappGUI.py
index 545b775..21db24f 100644
--- a/aleappGUI.py
+++ b/aleappGUI.py
@@ -1,16 +1,15 @@
-import typing
 import aleapp
+import os
 import PySimpleGUI as sg
+import sys
 import webbrowser
-import plugin_loader
+
 from scripts.ilapfuncs import *
 from scripts.version_info import aleapp_version
 from time import process_time, gmtime, strftime
+from scripts.ilap_artifacts import *
 from scripts.search_files import *
 
-MODULE_START_INDEX = 1000
-
-
 def ValidateInput(values, window):
     '''Returns tuple (success, extraction_type)'''
     global indx
@@ -50,7 +49,6 @@ def ValidateInput(values, window):
 
     return True, ext_type
 
-
 # initialize CheckBox control with module name   
 def CheckList(mtxt, lkey, mdstring, disable=False):
     if mdstring == 'test1' or mdstring == 'test2' : #items in the if are modules that take a long time to run. Deselects them by default.
@@ -59,30 +57,29 @@ def CheckList(mtxt, lkey, mdstring, disable=False):
         dstate = True
     return [sg.CBox(mtxt, default=dstate, key=lkey, metadata=mdstring, disabled=disable)]
 
-
 def pickModules():
     global indx
     global mlist
-    global loader
+    
+    script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'scripts', 'artifacts')
 
-    loader = plugin_loader.PluginLoader()
+    # Create sorted dict from 'tosearch' dictionary based on plugin category
+    sorted_tosearch = {k: v for k, v in sorted(tosearch.items(), key=lambda item: item[1][0].upper())}
 
-    indx = MODULE_START_INDEX     # arbitrary number to not interfere with other controls
-    for plugin in sorted(loader.plugins, key=lambda p: p.name.upper()):
-        disabled = plugin.module_name == 'usagestatsVersion'
-        mlist.append(CheckList(f'{plugin.category} [{plugin.name} - {plugin.module_name}.py]', indx, plugin.name, disabled))
+    indx = 1000     # arbitrary number to not interfere with other controls
+    for key, val in sorted_tosearch.items():
+        disabled = False if key != 'usagestatsVersion' else True # usagestatsVersion is REQUIRED
+        mlist.append( CheckList(val[0] + f' [{key}]', indx, key, disabled) )
         indx = indx + 1
-
-
+        
 sg.theme('LightGreen5')   # Add a touch of color
 # All the stuff inside your window.
 
 normal_font = ("Helvetica", 12)
-loader: typing.Optional[plugin_loader.PluginLoader] = None
 mlist = []
 # go through list of available modules and confirm they exist on the disk
 pickModules()
-GuiWindow.progress_bar_total = len(loader)
+GuiWindow.progress_bar_total = len(aleapp.tosearch)
 
 
 layout = [  [sg.Text('Android Logs, Events, And Protobuf Parser', font=("Helvetica", 22))],
@@ -117,11 +114,11 @@ while True:
 
     if event == "SELECT ALL":  
         # mark all modules
-        for x in range(MODULE_START_INDEX, indx):
+        for x in range(1000,indx):
             window[x].Update(True)
     if event == "DESELECT ALL":  
          # none modules
-        for x in range(MODULE_START_INDEX, indx):
+        for x in range(1000,indx):
             window[x].Update(False if window[x].metadata != 'usagestatsVersion' else True)  # usagestatsVersion.py is REQUIRED
     if event == 'Process':
         #check is selections made properly; if not we will return to input form without exiting app altogether
@@ -138,19 +135,17 @@ while True:
                 if output_folder[1] == ':': output_folder = '\\\\?\\' + output_folder.replace('/', '\\')
             
             # re-create modules list based on user selection
-            #search_list = { 'usagestatsVersion' : tosearch['usagestatsVersion'] } # hardcode usagestatsVersion as first item
-            search_list = [loader['Usage Stats Version']]  # hardcode usagestatsVersion as first item
-
+            search_list = { 'usagestatsVersion' : tosearch['usagestatsVersion'] } # hardcode usagestatsVersion as first item
             s_items = 0
-            for x in range(MODULE_START_INDEX, indx):
+            for x in range(1000,indx):
                 if window.FindElement(x).Get():
                     key = window[x].metadata
-                    if key in loader and key != 'Usage Stats Version':
-                        search_list.append(loader[key])
+                    if (key in tosearch) and (key != 'usagestatsVersion'):
+                        search_list[key] = tosearch[key]
                     s_items = s_items + 1 # for progress bar
                 
                 # no more selections allowed
-                window[x].Update(disabled=True)
+                window[x].Update(disabled = True)
                 
             window['SELECT ALL'].update(disabled=True)
             window['DESELECT ALL'].update(disabled=True)
@@ -158,8 +153,7 @@ while True:
             GuiWindow.window_handle = window
             out_params = OutputParameters(output_folder)
             wrap_text = True
-            crunch_successful = aleapp.crunch_artifacts(
-                search_list, extracttype, input_path, out_params, len(loader)/s_items, wrap_text)
+            crunch_successful = aleapp.crunch_artifacts(search_list, extracttype, input_path, out_params, len(aleapp.tosearch)/s_items, wrap_text)
             if crunch_successful:
                 report_path = os.path.join(out_params.report_folder_base, 'index.html')
                     
diff --git a/aleappGUI.spec b/aleappGUI.spec
index fab6032..f7ad31b 100644
--- a/aleappGUI.spec
+++ b/aleappGUI.spec
@@ -3,18 +3,16 @@
 block_cipher = None
 
 a = Analysis(['aleappGUI.py'],
-             pathex=['.\\scripts\\artifacts'],
+             pathex=[],
              binaries=[],
              datas=[('.\\scripts\\logo.jpg', '.\\scripts'),
                     ('.\\scripts\\dashboard.css', '.\\scripts'),
                     ('.\\scripts\\dark-mode.css', '.\\scripts'),
                     ('.\\scripts\\dark-mode-switch.js', '.\\scripts'),
                     ('.\\scripts\\feather.min.js', '.\\scripts'),
-                    ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0'),
-                    ('.\\scripts\\artifacts', '\\scripts\\artifacts')],
-
+                    ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0')],
              hiddenimports=[],
-             hookspath=['.\\'],
+             hookspath=[],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
@@ -36,4 +34,5 @@ exe = EXE(pyz,
           upx=True,
           console=False,
           upx_exclude=[],
-          runtime_tmpdir=None )
+          runtime_tmpdir=None,
+          console=False )
diff --git a/hook-plugin_loader.py b/hook-plugin_loader.py
deleted file mode 100644
index b2c206f..0000000
--- a/hook-plugin_loader.py
+++ /dev/null
@@ -1,24 +0,0 @@
-import plugin_loader
-
-# Hey PyInstaller? Yeah you! Take a look at these plugins! I know they're not actually imported anywhere but you
-# better believe that they will be a runtime, so, if you wouldn't mind, it'd be fantastic if you pretended that
-# they're imported normally and pick up *their* imports. OK? Great. Fantastic.
-
-print("Hooking plugins for pyinstaller")
-
-loader = plugin_loader.PluginLoader()
-
-tmp = []
-
-for py_file in plugin_loader.PLUGINPATH.glob("*.py"):
-    mod = plugin_loader.PluginLoader.load_module_lazy(py_file)
-    try:
-        mod_artifacts = mod.__artifacts__
-    except AttributeError:
-        pass  # any unconverted plugins still get checked out so they don't break the loader during runtime
-
-    tmp.append("scripts.artifacts." + mod.__name__)  # TODO this is a hack, if we ever move plugins this breaks
-
-print(f"{len(tmp)} plugins loaded as hidden imports")
-
-hiddenimports = list(tmp)
diff --git a/plugin_loader.py b/plugin_loader.py
deleted file mode 100644
index 0d51983..0000000
--- a/plugin_loader.py
+++ /dev/null
@@ -1,65 +0,0 @@
-import pathlib
-import dataclasses
-import typing
-import importlib.util
-
-#PLUGINPATH = pathlib.Path("./scripts/artifacts")
-# a bit long-winded to make compatible with PyInstaller
-PLUGINPATH = pathlib.Path(__file__).resolve().parent / pathlib.Path("scripts/artifacts")
-
-
-@dataclasses.dataclass(frozen=True)
-class PluginSpec:
-    name: str
-    module_name: str
-    category: str
-    search: str
-    method: typing.Callable  # todo define callable signature
-
-
-class PluginLoader:
-    def __init__(self, plugin_path: typing.Optional[pathlib.Path] = None):
-        self._plugin_path = plugin_path or PLUGINPATH
-        self._plugins: dict[str, PluginSpec] = {}
-        self._load_plugins()
-
-    @staticmethod
-    def load_module_lazy(path: pathlib.Path):
-        spec = importlib.util.spec_from_file_location(path.stem, path)
-        loader = importlib.util.LazyLoader(spec.loader)
-        spec.loader = loader
-        mod = importlib.util.module_from_spec(spec)
-        loader.exec_module(mod)
-        return mod
-
-    def _load_plugins(self):
-        for py_file in self._plugin_path.glob("*.py"):
-            mod = PluginLoader.load_module_lazy(py_file)
-            try:
-                mod_artifacts = mod.__artifacts__
-            except AttributeError:
-                continue  # no artifacts defined in this plugin
-
-            for name, (category, search, func) in mod_artifacts.items():
-                #self._plugins.append(PluginSpec(name, search, func))
-                if name in self._plugins:
-                    raise KeyError("Duplicate plugin")
-                self._plugins[name] = PluginSpec(name, py_file.stem, category, search, func)
-
-    @property
-    def plugins(self) -> typing.Iterable[PluginSpec]:
-        yield from self._plugins.values()
-
-    def __getitem__(self, item: str) -> PluginSpec:
-        return self._plugins[item]
-
-    def __contains__(self, item):
-        return item in self._plugins
-
-    def __len__(self):
-        return len(self._plugins)
-
-
-
-
-
diff --git a/scripts/artifacts/accounts_ce.py b/scripts/artifacts/accounts_ce.py
index a341f33..b1e5971 100644
--- a/scripts/artifacts/accounts_ce.py
+++ b/scripts/artifacts/accounts_ce.py
@@ -56,12 +56,5 @@ def process_accounts_ce(folder, uid, report_folder):
         tsvname = f'accounts ce {uid}'
         tsv(report_folder, data_headers, data_list, tsvname)
     else:
-        logfunc(f'No accounts_ce_{uid} data available')
-    db.close()
-    
-__artifacts__ = {
-        "Accounts_ce": (
-                "Accounts_ce",
-                ('*/data/system_ce/*/accounts_ce.db'),
-                get_accounts_ce)
-}
\ No newline at end of file
+        logfunc(f'No accounts_ce_{uid} data available')    
+    db.close()
\ No newline at end of file
diff --git a/scripts/artifacts/accounts_ce_authtokens.py b/scripts/artifacts/accounts_ce_authtokens.py
index ec6b060..23ad846 100644
--- a/scripts/artifacts/accounts_ce_authtokens.py
+++ b/scripts/artifacts/accounts_ce_authtokens.py
@@ -60,11 +60,4 @@ def process_accounts_ce_authtokens(folder, uid, report_folder):
         tsv(report_folder, data_headers, data_list, tsvname)
     else:
         logfunc(f'No Authtokens_{uid} data available')    
-    db.close()
-    
-__artifacts__ = {
-        "Accounts_ce authtokens": (
-                "Accounts_ce",
-                ('*/data/system_ce/*/accounts_ce.db'),
-                get_accounts_ce_authtokens)
-}
\ No newline at end of file
+    db.close()
\ No newline at end of file
diff --git a/scripts/artifacts/accounts_de.py b/scripts/artifacts/accounts_de.py
index 068ad74..cb4bfdb 100644
--- a/scripts/artifacts/accounts_de.py
+++ b/scripts/artifacts/accounts_de.py
@@ -60,12 +60,4 @@ def process_accounts_de(folder, uid, report_folder):
         timeline(report_folder, tlactivity, data_list, data_headers)
     else:
         logfunc(f'No accounts_de_{uid} data available')    
-    db.close()
-    
-    
-__artifacts__ = {
-        "Accounts_de": (
-                "Accounts_de",
-                ('*/data/system_de/*/accounts_de.db'),
-                get_accounts_de)
-}
\ No newline at end of file
+    db.close()
\ No newline at end of file
diff --git a/scripts/artifacts/adb_hosts.py b/scripts/artifacts/adb_hosts.py
index bae6df0..dd8fae8 100644
--- a/scripts/artifacts/adb_hosts.py
+++ b/scripts/artifacts/adb_hosts.py
@@ -24,10 +24,3 @@ def get_adb_hosts(files_found, report_folder, seeker, wrap_text):
         
     else:
         logfunc(f'No ADB Hosts file available')
-
-__artifacts__ = {
-        "Adb hosts": (
-                "adb hosts",
-                ('*/data/misc/adb/adb_keys'),
-                get_adb_hosts)
-}
\ No newline at end of file
diff --git a/scripts/artifacts/airGuard.py b/scripts/artifacts/airGuard.py
index 5457c42..6cf7911 100644
--- a/scripts/artifacts/airGuard.py
+++ b/scripts/artifacts/airGuard.py
@@ -54,9 +54,4 @@ def get_airGuard(files_found, report_folder, seeker, wrap_text):
         
     db.close()
 
-__artifacts__ = {
-        "AirGuard": (
-                "AirTags",
-                ('*/data/de.seemoo.at_tracking_detection.release/databases/attd_db'),
-                get_airGuard)
-}
\ No newline at end of file
+    
\ No newline at end of file
diff --git a/scripts/artifacts/appLockerfishingnet.py b/scripts/artifacts/appLockerfishingnet.py
index 112cf7c..4a44fe8 100644
--- a/scripts/artifacts/appLockerfishingnet.py
+++ b/scripts/artifacts/appLockerfishingnet.py
@@ -83,11 +83,4 @@ def get_appLockerfishingnet(files_found, report_folder, seeker, wrap_text):
             
             
         else:
-            logfunc('No Calculator Locker data available')
-
-__artifacts__ = {
-        "App Locker": (
-                "Encrypting Media Apps",
-                ('*/.privacy_safe/picture/*', '*/.privacy_safe/video/*'),
-                get_appLockerfishingnet)
-}
\ No newline at end of file
+            logfunc('No Calculator Locker data available')
\ No newline at end of file
diff --git a/scripts/artifacts/appicons.py b/scripts/artifacts/appicons.py
index 8b91cba..236421a 100644
--- a/scripts/artifacts/appicons.py
+++ b/scripts/artifacts/appicons.py
@@ -96,10 +96,4 @@ def get_appicons(files_found, report_folder, seeker, wrap_text):
                 data_list.append(( escape(app.name), escape(app.package), main_icon_html, other_icons_html ))
             report.write_artifact_data_table(data_headers, data_list, file_found, html_escape=False)
             report.end_artifact_report()
-
-__artifacts__ = {
-        "App Icons": (
-                "Installed Apps",
-                ('*/data/com.google.android.apps.nexuslauncher/databases/app_icons.db*'),
-                get_appicons)
-}
\ No newline at end of file
+            return
\ No newline at end of file
diff --git a/scripts/artifacts/calllogs.py b/scripts/artifacts/calllogs.py
index f07a2e8..0e47891 100644
--- a/scripts/artifacts/calllogs.py
+++ b/scripts/artifacts/calllogs.py
@@ -75,14 +75,6 @@ def get_calllogs(files_found, report_folder, seeker, wrap_text):
             logfunc('No Call Logs found')
             
 
-        db.close()
+        db.close
     
-    return
-
-# 'calllogs':('Call Logs', ('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*')),
-__artifacts__ = {
-    "Call Logs":(
-        "Call Logs",
-        ('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*'),
-        get_calllogs)
-}
+    return
\ No newline at end of file
diff --git a/scripts/artifacts/contacts.py b/scripts/artifacts/contacts.py
index 61e5ec2..904056a 100644
--- a/scripts/artifacts/contacts.py
+++ b/scripts/artifacts/contacts.py
@@ -73,14 +73,6 @@ def get_contacts(files_found, report_folder, seeker, wrap_text):
             logfunc('No Contacts found')
             
 
-        db.close()
+        db.close
     
-    return
-
-# 'contacts':('Contacts', ('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*')),
-__artifacts__ = {
-    "Contacts": (
-        "Contacts",
-        ('**/com.android.providers.contacts/databases/contact*', '**/com.sec.android.provider.logsprovider/databases/logs.db*'),
-        get_contacts)
-}
\ No newline at end of file
+    return
\ No newline at end of file
diff --git a/scripts/artifacts/usagestatsVersion.py b/scripts/artifacts/usagestatsVersion.py
index 6f5db88..6f0d8c1 100644
--- a/scripts/artifacts/usagestatsVersion.py
+++ b/scripts/artifacts/usagestatsVersion.py
@@ -1,14 +1,13 @@
 import csv
-import scripts.artifacts.artGlobals 
-
-from scripts.artifact_report import ArtifactHtmlReport
-from scripts.ilapfuncs import logfunc, tsv, logdevinfo, is_platform_windows
-
-
-def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
-    data_list = []
-    file_found = str(files_found[0])
-
+import scripts.artifacts.artGlobals 
+
+from scripts.artifact_report import ArtifactHtmlReport
+from scripts.ilapfuncs import logfunc, tsv, logdevinfo, is_platform_windows
+
+def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
+    data_list = []
+    file_found = str(files_found[0])
+
     with open(file_found, "r") as f:
         for line in f:
             splits = line.split(';')
@@ -38,25 +37,18 @@ def get_usagestatsVersion(files_found, report_folder, seeker, wrap_text):
                 
                 logdevinfo(f"Build version per Usagestats: {splits[2]}")
                 data_list.append(('Build Version', splits[2]))
-
-    if len(data_list) > 0:
-        report = ArtifactHtmlReport('OS Version')
-        report.start_artifact_report(report_folder, f'OS Version')
-        report.add_script()
-        data_headers = ('Key', 'Value')
-        report.write_artifact_data_table(data_headers, data_list, file_found)
-        report.end_artifact_report()
-        
-        tsvname = f'OS Version'
-        tsv(report_folder, data_headers, data_list, tsvname)
-        
-    else:
-        logfunc(f'No OS Version file available')
-
-
-__artifacts__ = {
-    "Usage Stats Version": (
-        "Usage Stats",
-        ('*/system/usagestats/*/version', '*/system_ce/*/usagestats/version'),
-        get_usagestatsVersion)
-}
\ No newline at end of file
+
+
+    if len(data_list) > 0:
+        report = ArtifactHtmlReport('OS Version')
+        report.start_artifact_report(report_folder, f'OS Version')
+        report.add_script()
+        data_headers = ('Key', 'Value')
+        report.write_artifact_data_table(data_headers, data_list, file_found)
+        report.end_artifact_report()
+        
+        tsvname = f'OS Version'
+        tsv(report_folder, data_headers, data_list, tsvname)
+        
+    else:
+        logfunc(f'No OS Version file available')
\ No newline at end of file
diff --git a/scripts/artifacts/vlcMedia.py b/scripts/artifacts/vlcMedia.py
index 73aecac..4d4fc1b 100644
--- a/scripts/artifacts/vlcMedia.py
+++ b/scripts/artifacts/vlcMedia.py
@@ -51,9 +51,8 @@ def get_vlcMedia(files_found, report_folder, seeker, wrap_text):
     else:
         logfunc('No VLC Media data available')
     
-__artifacts__ = {
-        "VLC": (
-                "VLC",
-                ('*vlc_media.db*'),
-                get_vlcMedia)
-}
\ No newline at end of file
+    db.close()
+    return 
+
+        
+        
\ No newline at end of file
diff --git a/scripts/artifacts/vlcThumbs.py b/scripts/artifacts/vlcThumbs.py
index 5a1156c..18be991 100644
--- a/scripts/artifacts/vlcThumbs.py
+++ b/scripts/artifacts/vlcThumbs.py
@@ -30,12 +30,7 @@ def get_vlcThumbs(files_found, report_folder, seeker, wrap_text):
     tsvname = 'VLC Thumbnails'
     tsv(report_folder, data_headers, data_list, tsvname)
         
-__artifacts__ = {
-        "VLC Thumbs": (
-                "VLC",
-                ('*/org.videolan.vlc/files/medialib/*.jpg'),
-                get_vlcThumbs)
-}
+
 
         
         
\ No newline at end of file
-- 
2.34.1

