From 361a7510599c7e506946e4fe7ce82f4b1a5ad82f Mon Sep 17 00:00:00 2001
From: Alex Caithness <acaithness@cclgroupltd.com>
Date: Mon, 4 Jul 2022 13:14:57 +0100
Subject: [PATCH 03/19] Add pyinstaller hook for the plugin_loader module that
 tricks it into seeing all of the plugins as imports at build

---
 aleapp.spec           |  2 +-
 aleappGUI.spec        | 11 ++++++-----
 hook-plugin_loader.py | 24 ++++++++++++++++++++++++
 plugin_loader.py      |  4 +++-
 4 files changed, 34 insertions(+), 7 deletions(-)
 create mode 100644 hook-plugin_loader.py

diff --git a/aleapp.spec b/aleapp.spec
index 8d09da1..0e1be9b 100644
--- a/aleapp.spec
+++ b/aleapp.spec
@@ -12,7 +12,7 @@ a = Analysis(['aleapp.py'],
                     ('.\\scripts\\feather.min.js', '.\\scripts'),
                     ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0')],
              hiddenimports=['simplekml'],
-             hookspath=[],
+             hookspath=['.\\'],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
diff --git a/aleappGUI.spec b/aleappGUI.spec
index f7ad31b..fab6032 100644
--- a/aleappGUI.spec
+++ b/aleappGUI.spec
@@ -3,16 +3,18 @@
 block_cipher = None
 
 a = Analysis(['aleappGUI.py'],
-             pathex=[],
+             pathex=['.\\scripts\\artifacts'],
              binaries=[],
              datas=[('.\\scripts\\logo.jpg', '.\\scripts'),
                     ('.\\scripts\\dashboard.css', '.\\scripts'),
                     ('.\\scripts\\dark-mode.css', '.\\scripts'),
                     ('.\\scripts\\dark-mode-switch.js', '.\\scripts'),
                     ('.\\scripts\\feather.min.js', '.\\scripts'),
-                    ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0')],
+                    ('.\\scripts\\MDB-Free_4.13.0', '.\\scripts\\MDB-Free_4.13.0'),
+                    ('.\\scripts\\artifacts', '\\scripts\\artifacts')],
+
              hiddenimports=[],
-             hookspath=[],
+             hookspath=['.\\'],
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
@@ -34,5 +36,4 @@ exe = EXE(pyz,
           upx=True,
           console=False,
           upx_exclude=[],
-          runtime_tmpdir=None,
-          console=False )
+          runtime_tmpdir=None )
diff --git a/hook-plugin_loader.py b/hook-plugin_loader.py
new file mode 100644
index 0000000..b2c206f
--- /dev/null
+++ b/hook-plugin_loader.py
@@ -0,0 +1,24 @@
+import plugin_loader
+
+# Hey PyInstaller? Yeah you! Take a look at these plugins! I know they're not actually imported anywhere but you
+# better believe that they will be a runtime, so, if you wouldn't mind, it'd be fantastic if you pretended that
+# they're imported normally and pick up *their* imports. OK? Great. Fantastic.
+
+print("Hooking plugins for pyinstaller")
+
+loader = plugin_loader.PluginLoader()
+
+tmp = []
+
+for py_file in plugin_loader.PLUGINPATH.glob("*.py"):
+    mod = plugin_loader.PluginLoader.load_module_lazy(py_file)
+    try:
+        mod_artifacts = mod.__artifacts__
+    except AttributeError:
+        pass  # any unconverted plugins still get checked out so they don't break the loader during runtime
+
+    tmp.append("scripts.artifacts." + mod.__name__)  # TODO this is a hack, if we ever move plugins this breaks
+
+print(f"{len(tmp)} plugins loaded as hidden imports")
+
+hiddenimports = list(tmp)
diff --git a/plugin_loader.py b/plugin_loader.py
index 94f6635..0d51983 100644
--- a/plugin_loader.py
+++ b/plugin_loader.py
@@ -3,7 +3,9 @@ import dataclasses
 import typing
 import importlib.util
 
-PLUGINPATH = pathlib.Path("./scripts/artifacts")
+#PLUGINPATH = pathlib.Path("./scripts/artifacts")
+# a bit long-winded to make compatible with PyInstaller
+PLUGINPATH = pathlib.Path(__file__).resolve().parent / pathlib.Path("scripts/artifacts")
 
 
 @dataclasses.dataclass(frozen=True)
-- 
2.34.1

